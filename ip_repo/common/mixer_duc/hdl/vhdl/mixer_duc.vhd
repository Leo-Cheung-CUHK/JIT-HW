-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mixer_duc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    d_i0_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    d_i0_V_TVALID : IN STD_LOGIC;
    d_i0_V_TREADY : OUT STD_LOGIC;
    cfg0_V : IN STD_LOGIC_VECTOR (31 downto 0);
    d_o_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_o_V_full_n : IN STD_LOGIC;
    d_o_V_write : OUT STD_LOGIC );
end;


architecture behav of mixer_duc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mixer_duc,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.188000,HLS_SYN_LAT=169,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=4,HLS_SYN_FF=563,HLS_SYN_LUT=642,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal d_i0_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal d_i0_V_0_vld_in : STD_LOGIC;
    signal d_i0_V_0_vld_out : STD_LOGIC;
    signal d_i0_V_0_ack_in : STD_LOGIC;
    signal d_i0_V_0_ack_out : STD_LOGIC;
    signal d_i0_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal d_i0_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal d_i0_V_0_sel_rd : STD_LOGIC := '0';
    signal d_i0_V_0_sel_wr : STD_LOGIC := '0';
    signal d_i0_V_0_sel : STD_LOGIC;
    signal d_i0_V_0_load_A : STD_LOGIC;
    signal d_i0_V_0_load_B : STD_LOGIC;
    signal d_i0_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_i0_V_0_state_cmp_full : STD_LOGIC;
    signal i_p0n5n10n15n20MHz_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_p0n5n10n15n20MHz_ce0 : STD_LOGIC;
    signal i_p0n5n10n15n20MHz_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_p0n5n10n15n20MHz_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal q_p0n5n10n15n20MHz_ce0 : STD_LOGIC;
    signal q_p0n5n10n15n20MHz_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_i0_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_7_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_o_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal tmp_7_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_484_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_139 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_150_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_14_fu_196_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_4_fu_202_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_cast_fu_216_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_7_reg_484_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_484_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_484_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_484_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_484_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_484_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_230_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_251_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_reg_503 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_reg_503_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_reg_508 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_reg_508_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_reg_508_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal i_p0n5n10n15n20MHz_l_reg_513 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_p0n5n10n15n20MHz_l_reg_518 : STD_LOGIC_VECTOR (7 downto 0);
    signal mt_fu_265_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mt_reg_523 : STD_LOGIC_VECTOR (7 downto 0);
    signal bw20_a0_M_real_V_ca_fu_271_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal c00_M_real_V_cast_fu_274_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal c00_M_real_V_cast_reg_534 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_282_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_reg_540 : STD_LOGIC_VECTOR (23 downto 0);
    signal bw20_a0_M_imag_V_ca_fu_286_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_432_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_i_i_reg_552 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_2_i_i_cast_reg_557 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_444_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_r_V_reg_562 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal grp_fu_450_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal complex_M_imag_V_wr_reg_568 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_2_fu_308_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_579 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_584 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_5_fu_346_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_594 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_599 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_392_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_604 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_419_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_reg_609 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal tmp_17_cast_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_168_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_172_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_184_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_180_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_192_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal bw20_num_shift_to_le_fu_158_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sh_V_1_fu_210_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_cast_fu_236_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_240_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_fu_277_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_295_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_r_V_cast_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_cast_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_fu_333_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal complex_M_imag_V_wr_1_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_cast_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg9_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_376_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_386_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_neg_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_403_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_413_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_432_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_438_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_444_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_450_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_450_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_432_ce : STD_LOGIC;
    signal grp_fu_438_ce : STD_LOGIC;
    signal grp_fu_444_ce : STD_LOGIC;
    signal grp_fu_450_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component mixer_duc_mul_mul_16s_8s_24_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component mixer_duc_mac_mulsub_16s_8s_24s_24_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component mixer_duc_mac_muladd_16s_8s_24s_24_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component mixer_duc_i_p0n5n10n15n20MHz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mixer_duc_q_p0n5n10n15n20MHz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    i_p0n5n10n15n20MHz_U : component mixer_duc_i_p0n5n10n15n20MHz
    generic map (
        DataWidth => 8,
        AddressRange => 800,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => i_p0n5n10n15n20MHz_address0,
        ce0 => i_p0n5n10n15n20MHz_ce0,
        q0 => i_p0n5n10n15n20MHz_q0);

    q_p0n5n10n15n20MHz_U : component mixer_duc_q_p0n5n10n15n20MHz
    generic map (
        DataWidth => 8,
        AddressRange => 800,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => q_p0n5n10n15n20MHz_address0,
        ce0 => q_p0n5n10n15n20MHz_ce0,
        q0 => q_p0n5n10n15n20MHz_q0);

    mixer_duc_mul_mul_16s_8s_24_3_1_U1 : component mixer_duc_mul_mul_16s_8s_24_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_432_p0,
        din1 => i_p0n5n10n15n20MHz_l_reg_513,
        ce => grp_fu_432_ce,
        dout => grp_fu_432_p2);

    mixer_duc_mul_mul_16s_8s_24_3_1_U2 : component mixer_duc_mul_mul_16s_8s_24_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_438_p0,
        din1 => ret_V_fu_277_p3,
        ce => grp_fu_438_ce,
        dout => grp_fu_438_p2);

    mixer_duc_mac_mulsub_16s_8s_24s_24_3_1_U3 : component mixer_duc_mac_mulsub_16s_8s_24s_24_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_444_p0,
        din1 => grp_fu_444_p1,
        din2 => p_i_i_reg_552,
        ce => grp_fu_444_ce,
        dout => grp_fu_444_p3);

    mixer_duc_mac_muladd_16s_8s_24s_24_3_1_U4 : component mixer_duc_mac_muladd_16s_8s_24s_24_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_450_p0,
        din1 => grp_fu_450_p1,
        din2 => p_2_i_i_cast_reg_557,
        ce => grp_fu_450_ce,
        dout => grp_fu_450_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_i0_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i0_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((d_i0_V_0_ack_out = ap_const_logic_1) and (d_i0_V_0_vld_out = ap_const_logic_1))) then 
                                        d_i0_V_0_sel_rd <= not(d_i0_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_i0_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i0_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((d_i0_V_0_ack_in = ap_const_logic_1) and (d_i0_V_0_vld_in = ap_const_logic_1))) then 
                                        d_i0_V_0_sel_wr <= not(d_i0_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_i0_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i0_V_0_state <= ap_const_lv2_0;
            else
                if ((((d_i0_V_0_vld_in = ap_const_logic_0) and (d_i0_V_0_state = ap_const_lv2_2)) or ((d_i0_V_0_vld_in = ap_const_logic_0) and (d_i0_V_0_state = ap_const_lv2_3) and (d_i0_V_0_ack_out = ap_const_logic_1)))) then 
                    d_i0_V_0_state <= ap_const_lv2_2;
                elsif ((((d_i0_V_0_ack_out = ap_const_logic_0) and (d_i0_V_0_state = ap_const_lv2_1)) or ((d_i0_V_0_ack_out = ap_const_logic_0) and (d_i0_V_0_state = ap_const_lv2_3) and (d_i0_V_0_vld_in = ap_const_logic_1)))) then 
                    d_i0_V_0_state <= ap_const_lv2_1;
                elsif (((not(((d_i0_V_0_vld_in = ap_const_logic_0) and (d_i0_V_0_ack_out = ap_const_logic_1))) and not(((d_i0_V_0_ack_out = ap_const_logic_0) and (d_i0_V_0_vld_in = ap_const_logic_1))) and (d_i0_V_0_state = ap_const_lv2_3)) or ((d_i0_V_0_state = ap_const_lv2_1) and (d_i0_V_0_ack_out = ap_const_logic_1)) or ((d_i0_V_0_state = ap_const_lv2_2) and (d_i0_V_0_vld_in = ap_const_logic_1)))) then 
                    d_i0_V_0_state <= ap_const_lv2_3;
                else 
                    d_i0_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_139 <= i_1_fu_230_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_139 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_484_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                c00_M_real_V_cast_reg_534 <= c00_M_real_V_cast_fu_274_p1;
                tmp_5_reg_540 <= tmp_5_fu_282_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_484_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                complex_M_imag_V_wr_reg_568 <= grp_fu_450_p3;
                p_r_V_reg_562 <= grp_fu_444_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((d_i0_V_0_load_A = ap_const_logic_1)) then
                d_i0_V_0_payload_A <= d_i0_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((d_i0_V_0_load_B = ap_const_logic_1)) then
                d_i0_V_0_payload_B <= d_i0_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_484 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_p0n5n10n15n20MHz_l_reg_513 <= i_p0n5n10n15n20MHz_q0;
                q_p0n5n10n15n20MHz_l_reg_518 <= q_p0n5n10n15n20MHz_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_Result_s_fu_150_p3 = ap_const_lv1_1) and (tmp_7_reg_484 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mt_reg_523 <= mt_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_484_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_2_i_i_cast_reg_557 <= grp_fu_438_p2;
                p_i_i_reg_552 <= grp_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_1_reg_508 <= d_i0_V_0_data_out(31 downto 16);
                tmp_17_reg_503 <= tmp_17_fu_251_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_1_reg_508_pp0_iter1_reg <= p_Result_1_reg_508;
                tmp_17_reg_503_pp0_iter1_reg <= tmp_17_reg_503;
                tmp_7_reg_484 <= tmp_7_fu_224_p2;
                tmp_7_reg_484_pp0_iter1_reg <= tmp_7_reg_484;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                p_Result_1_reg_508_pp0_iter2_reg <= p_Result_1_reg_508_pp0_iter1_reg;
                tmp_7_reg_484_pp0_iter2_reg <= tmp_7_reg_484_pp0_iter1_reg;
                tmp_7_reg_484_pp0_iter3_reg <= tmp_7_reg_484_pp0_iter2_reg;
                tmp_7_reg_484_pp0_iter4_reg <= tmp_7_reg_484_pp0_iter3_reg;
                tmp_7_reg_484_pp0_iter5_reg <= tmp_7_reg_484_pp0_iter4_reg;
                tmp_7_reg_484_pp0_iter6_reg <= tmp_7_reg_484_pp0_iter5_reg;
                tmp_7_reg_484_pp0_iter7_reg <= tmp_7_reg_484_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_484_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                r_V_2_reg_574 <= r_V_2_fu_308_p3;
                r_V_5_reg_589 <= r_V_5_fu_346_p3;
                tmp_12_reg_599 <= r_V_5_fu_346_p3(21 downto 6);
                tmp_18_reg_579 <= r_V_2_fu_308_p3(31 downto 31);
                tmp_19_reg_594 <= r_V_5_fu_346_p3(31 downto 31);
                tmp_9_reg_584 <= r_V_2_fu_308_p3(21 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_484_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_13_reg_609 <= tmp_13_fu_419_p3;
                tmp_s_reg_604 <= tmp_s_fu_392_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter0, tmp_7_fu_224_p2, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((tmp_7_fu_224_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((tmp_7_fu_224_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(d_i0_V_0_vld_out, d_o_V_full_n, ap_enable_reg_pp0_iter0, tmp_7_fu_224_p2, ap_enable_reg_pp0_iter8, tmp_7_reg_484_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_7_reg_484_pp0_iter7_reg = ap_const_lv1_0) and (d_o_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((tmp_7_fu_224_p2 = ap_const_lv1_0) and (d_i0_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(d_i0_V_0_vld_out, d_o_V_full_n, ap_enable_reg_pp0_iter0, tmp_7_fu_224_p2, ap_enable_reg_pp0_iter8, tmp_7_reg_484_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_7_reg_484_pp0_iter7_reg = ap_const_lv1_0) and (d_o_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((tmp_7_fu_224_p2 = ap_const_lv1_0) and (d_i0_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(d_i0_V_0_vld_out, d_o_V_full_n, ap_enable_reg_pp0_iter0, tmp_7_fu_224_p2, ap_enable_reg_pp0_iter8, tmp_7_reg_484_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_7_reg_484_pp0_iter7_reg = ap_const_lv1_0) and (d_o_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((tmp_7_fu_224_p2 = ap_const_lv1_0) and (d_i0_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter8_assign_proc : process(d_o_V_full_n, tmp_7_reg_484_pp0_iter7_reg)
    begin
                ap_block_state10_pp0_stage0_iter8 <= ((tmp_7_reg_484_pp0_iter7_reg = ap_const_lv1_0) and (d_o_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(d_i0_V_0_vld_out, tmp_7_fu_224_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((tmp_7_fu_224_p2 = ap_const_lv1_0) and (d_i0_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_7_fu_224_p2)
    begin
        if ((tmp_7_fu_224_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

        bw20_a0_M_imag_V_ca_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_1_reg_508_pp0_iter2_reg),24));

        bw20_a0_M_real_V_ca_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_reg_503_pp0_iter1_reg),24));

    bw20_num_shift_to_le_fu_158_p4 <= cfg0_V(31 downto 28);
        c00_M_real_V_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_p0n5n10n15n20MHz_l_reg_513),24));

        complex_M_imag_V_wr_1_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(complex_M_imag_V_wr_reg_568),32));

    d_i0_V_0_ack_in <= d_i0_V_0_state(1);

    d_i0_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_7_fu_224_p2, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_7_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            d_i0_V_0_ack_out <= ap_const_logic_1;
        else 
            d_i0_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    d_i0_V_0_data_out_assign_proc : process(d_i0_V_0_payload_A, d_i0_V_0_payload_B, d_i0_V_0_sel)
    begin
        if ((d_i0_V_0_sel = ap_const_logic_1)) then 
            d_i0_V_0_data_out <= d_i0_V_0_payload_B;
        else 
            d_i0_V_0_data_out <= d_i0_V_0_payload_A;
        end if; 
    end process;

    d_i0_V_0_load_A <= (not(d_i0_V_0_sel_wr) and d_i0_V_0_state_cmp_full);
    d_i0_V_0_load_B <= (d_i0_V_0_state_cmp_full and d_i0_V_0_sel_wr);
    d_i0_V_0_sel <= d_i0_V_0_sel_rd;
    d_i0_V_0_state_cmp_full <= '0' when (d_i0_V_0_state = ap_const_lv2_1) else '1';
    d_i0_V_0_vld_in <= d_i0_V_TVALID;
    d_i0_V_0_vld_out <= d_i0_V_0_state(0);

    d_i0_V_TDATA_blk_n_assign_proc : process(d_i0_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, tmp_7_fu_224_p2)
    begin
        if (((tmp_7_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            d_i0_V_TDATA_blk_n <= d_i0_V_0_state(0);
        else 
            d_i0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_i0_V_TREADY <= d_i0_V_0_state(1);

    d_o_V_blk_n_assign_proc : process(d_o_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, tmp_7_reg_484_pp0_iter7_reg)
    begin
        if (((tmp_7_reg_484_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            d_o_V_blk_n <= d_o_V_full_n;
        else 
            d_o_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_o_V_din <= (tmp_13_reg_609 & tmp_s_reg_604);

    d_o_V_write_assign_proc : process(ap_enable_reg_pp0_iter8, tmp_7_reg_484_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_7_reg_484_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            d_o_V_write <= ap_const_logic_1;
        else 
            d_o_V_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_432_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_432_ce <= ap_const_logic_1;
        else 
            grp_fu_432_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_432_p0 <= bw20_a0_M_real_V_ca_fu_271_p1(16 - 1 downto 0);

    grp_fu_438_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_438_ce <= ap_const_logic_1;
        else 
            grp_fu_438_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_438_p0 <= bw20_a0_M_real_V_ca_fu_271_p1(16 - 1 downto 0);

    grp_fu_444_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_444_ce <= ap_const_logic_1;
        else 
            grp_fu_444_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_444_p0 <= bw20_a0_M_imag_V_ca_fu_286_p1(16 - 1 downto 0);
    grp_fu_444_p1 <= tmp_5_reg_540(8 - 1 downto 0);

    grp_fu_450_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_450_ce <= ap_const_logic_1;
        else 
            grp_fu_450_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_450_p0 <= bw20_a0_M_imag_V_ca_fu_286_p1(16 - 1 downto 0);
    grp_fu_450_p1 <= c00_M_real_V_cast_reg_534(8 - 1 downto 0);
    i_1_fu_230_p2 <= std_logic_vector(unsigned(i_reg_139) + unsigned(ap_const_lv8_1));
    i_p0n5n10n15n20MHz_address0 <= tmp_17_cast_fu_245_p1(10 - 1 downto 0);

    i_p0n5n10n15n20MHz_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            i_p0n5n10n15n20MHz_ce0 <= ap_const_logic_1;
        else 
            i_p0n5n10n15n20MHz_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mt_fu_265_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(q_p0n5n10n15n20MHz_q0));
    p_Result_4_fu_202_p3 <= cfg0_V(31 downto 31);
    p_Result_s_fu_150_p3 <= cfg0_V(2 downto 2);
    p_neg9_fu_371_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(r_V_2_reg_574));
    p_neg_fu_398_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(r_V_5_reg_589));
        p_r_V_cast_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_r_V_reg_562),32));

    p_shl1_cast_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_184_p3),10));
    p_shl_cast_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_172_p3),10));
    q_p0n5n10n15n20MHz_address0 <= tmp_17_cast_fu_245_p1(10 - 1 downto 0);

    q_p0n5n10n15n20MHz_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            q_p0n5n10n15n20MHz_ce0 <= ap_const_logic_1;
        else 
            q_p0n5n10n15n20MHz_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_303_p2 <= std_logic_vector(shift_left(unsigned(p_r_V_cast_fu_289_p1),to_integer(unsigned('0' & tmp_6_fu_220_p1(31-1 downto 0)))));
    r_V_2_fu_308_p3 <= 
        r_V_cast_fu_299_p1 when (p_Result_4_fu_202_p3(0) = '1') else 
        r_V_1_fu_303_p2;
        r_V_3_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_fu_333_p2),32));

    r_V_3_fu_333_p2 <= std_logic_vector(shift_right(signed(complex_M_imag_V_wr_reg_568),to_integer(unsigned('0' & tmp_5_cast_fu_216_p1(24-1 downto 0)))));
    r_V_4_fu_341_p2 <= std_logic_vector(shift_left(unsigned(complex_M_imag_V_wr_1_fu_292_p1),to_integer(unsigned('0' & tmp_6_fu_220_p1(31-1 downto 0)))));
    r_V_5_fu_346_p3 <= 
        r_V_3_cast_fu_337_p1 when (p_Result_4_fu_202_p3(0) = '1') else 
        r_V_4_fu_341_p2;
        r_V_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_295_p2),32));

    r_V_fu_295_p2 <= std_logic_vector(shift_right(signed(p_r_V_reg_562),to_integer(unsigned('0' & tmp_5_cast_fu_216_p1(24-1 downto 0)))));
    ret_V_fu_277_p3 <= 
        mt_reg_523 when (p_Result_s_fu_150_p3(0) = '1') else 
        q_p0n5n10n15n20MHz_l_reg_518;
    sh_V_1_fu_210_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(bw20_num_shift_to_le_fu_158_p4));
    tmp_10_fu_403_p4 <= p_neg_fu_398_p2(21 downto 6);
    tmp_11_fu_413_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_10_fu_403_p4));
    tmp_13_fu_419_p3 <= 
        tmp_11_fu_413_p2 when (tmp_19_reg_594(0) = '1') else 
        tmp_12_reg_599;
    tmp_14_fu_196_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_180_p1) + unsigned(p_shl1_cast_fu_192_p1));
    tmp_16_fu_240_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_236_p1) + unsigned(tmp_14_fu_196_p2));
    tmp_17_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_240_p2),64));
    tmp_17_fu_251_p1 <= d_i0_V_0_data_out(16 - 1 downto 0);
    tmp_2_fu_172_p3 <= (tmp_fu_168_p1 & ap_const_lv7_0);
    tmp_3_fu_376_p4 <= p_neg9_fu_371_p2(21 downto 6);
    tmp_4_fu_386_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_3_fu_376_p4));
    tmp_5_cast_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_V_1_fu_210_p2),24));
        tmp_5_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_277_p3),24));

    tmp_6_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bw20_num_shift_to_le_fu_158_p4),32));
    tmp_7_fu_224_p2 <= "1" when (i_reg_139 = ap_const_lv8_A0) else "0";
    tmp_8_cast_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_139),10));
    tmp_8_fu_184_p3 <= (tmp_fu_168_p1 & ap_const_lv5_0);
    tmp_fu_168_p1 <= cfg0_V(2 - 1 downto 0);
    tmp_s_fu_392_p3 <= 
        tmp_4_fu_386_p2 when (tmp_18_reg_579(0) = '1') else 
        tmp_9_reg_584;
end behav;
